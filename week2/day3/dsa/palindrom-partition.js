// Problem Statement: You are given a string s, partition it in such a way that every substring is a palindrome. Return all such palindromic partitions of s.

// Note: A palindrome string is a string that reads the same backward as forward.

// Examples:

// Example 1:
// Input: s = “aab”
// Output: [ ["a","a","b"], ["aa","b"] ]	

// Explanation: The first  answer is generated by  making three partitions. The second answer is generated by making two partitions.

function palindromPartition(s){
    let n = s.length;
    let temp = [];
    let ans = [];

    const isPalindrome = (i,j) => {
        while(j > i){
            if(s.charAt(i) !== s.charAt(j)) {
                return false;
            };
            j--;
            i++;
        }
        return true;
    }

    const helper = (idx) => {
        if(idx >= n){
            ans.push(structuredClone(temp));
            return;
        }
        for(let i = idx; i < n; i++){
            if(isPalindrome(idx, i)){
                temp.push(s.substring(idx, i+1));
                helper(i+1);
                temp.pop();
            }
        }
    }
    helper(0);
    return ans;
}

console.log(palindromPartition("aab"));